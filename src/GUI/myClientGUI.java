/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * myClientGUI.java
 *
 * Created on 03-Nov-2011, 14:41:19
 */

package GUI;

import java.awt.List;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import myMessagePackage.myMessage;
import myMethods.myMethods;
import serverCommands.*;
/**
 *
 * @author gerry
 */
public class myClientGUI extends javax.swing.JFrame {

    private static InetAddress host;
    private static int PORT = 1234;
    private static Socket clientSocket;
    private static BufferedReader keyboard;

    private static ObjectOutputStream oos = null;
    private static ObjectInputStream ois = null;

    private static myMessage outMessage=null;
    private static myMessage inMessage=null;

    private String sCurrentUser="";

    /** Creates new form myClientGUI */
    public myClientGUI() {
        initComponents();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblServer = new java.awt.Label();
        txtChatHistory = new java.awt.TextArea();
        list1 = new java.awt.List();
        txtMessage = new java.awt.TextField();
        cmdSend = new java.awt.Button();
        txtServer = new java.awt.TextField();
        cmdConnect = new java.awt.Button();
        txtPort = new javax.swing.JTextField();
        label1 = new java.awt.Label();
        cmdDisconnect = new java.awt.Button();
        cmdTestCommands = new java.awt.Button();
        lblStatus = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblServer.setText("Server:");

        list1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list1ActionPerformed(evt);
            }
        });

        txtMessage.setText("textField1");
        txtMessage.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                txtMessageTextValueChanged(evt);
            }
        });
        txtMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMessageActionPerformed(evt);
            }
        });
        txtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMessageKeyPressed(evt);
            }
        });

        cmdSend.setLabel("Send");
        cmdSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSendActionPerformed(evt);
            }
        });

        txtServer.setText("127.0.0.1");
        txtServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServerActionPerformed(evt);
            }
        });

        cmdConnect.setLabel("Connect");
        cmdConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdConnectActionPerformed(evt);
            }
        });

        txtPort.setText("1234");

        label1.setText("Port:");

        cmdDisconnect.setLabel("Disconnect");
        cmdDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDisconnectActionPerformed(evt);
            }
        });

        cmdTestCommands.setLabel("Test Commands");
        cmdTestCommands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTestCommandsActionPerformed(evt);
            }
        });

        lblStatus.setText("Status");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtServer, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(cmdConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(cmdDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txtChatHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdTestCommands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdConnect, 0, 0, Short.MAX_VALUE)
                    .addComponent(txtPort)
                    .addComponent(cmdDisconnect, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(list1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addComponent(txtChatHistory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmdTestCommands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSendActionPerformed
        // TODO add your handling code here:

        if(clientSocket!=null){
            String sMsg="";
            sMsg=txtMessage.getText() + "\n";
            sendMessage(sMsg,ServerCommands.CMD_MSGTOALL);
        }
        else
        {
            myMethods.msgBox("Error: Not Connected to server, no connection.");
        }

    }//GEN-LAST:event_cmdSendActionPerformed

    private void txtServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServerActionPerformed

    private void cmdConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdConnectActionPerformed
        // TODO add your handling code here:

        System.out.println("connecting to server...");
        connectToServer();
        System.out.println("Connected");

        //setusername
        sCurrentUser=myMethods.inputBox("Enter UserName");

        if(createStreams()==true)
        {
            System.out.println("Streams Ready");            

            //listen for messages
            System.out.println("listenForMessages()");
            clientListener handler = new clientListener(txtChatHistory,list1);
            handler.start();//As usual, this method calls run.

            //enable discconect button
            //cmdDisconnect.enable();

            //send login command
            sendMessage("LOGIN",ServerCommands.CMD_LOGIN);
        }
        else
        {
            System.out.println("Unable to setup streams");
        }

    }//GEN-LAST:event_cmdConnectActionPerformed

    private void cmdDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDisconnectActionPerformed
        disconnectFromServer();
    }//GEN-LAST:event_cmdDisconnectActionPerformed

    private void txtMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMessageActionPerformed

    private void txtMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtMessageKeyPressed

    private void txtMessageTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_txtMessageTextValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMessageTextValueChanged

    private void cmdTestCommandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTestCommandsActionPerformed
        // TODO add your handling code here:
        sendMessage("",ServerCommands.CMD_PRINTALLCLIENTS);
    }//GEN-LAST:event_cmdTestCommandsActionPerformed

    private void list1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_list1ActionPerformed

    /*public void actionPerformed(ActionEvent event) {
    }*/

    public void connectToServer()
    {
        String sServer=txtServer.getText();
        PORT=Integer.parseInt(txtPort.getText());
        try {
            //host = InetAddress.getByName("localhost");//InetAddress.getLocalHost();
            host = InetAddress.getByName(sServer);
            clientSocket = new Socket(host, PORT);
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }

    public boolean createStreams()
    {
        try{
            //serial
            //*******************************************************************************
            // open I/O streams for objects - serialization streams
            oos = new ObjectOutputStream(clientSocket.getOutputStream());
            ois = new ObjectInputStream(clientSocket.getInputStream());

            inMessage=new myMessage();
            outMessage=new myMessage();

            return true;
        }
        catch(Exception e)
        {
            e.printStackTrace();
            return false;
        }
    }

    //default cmd is to send to all
    public void sendMessage(String sText,int iCommand)
    {
        outMessage.setsUserName(sCurrentUser);
        //set command
        outMessage.setCOMMAND(iCommand);

        outMessage.setsMessage(sText);
        System.out.println("sendMessage = " + sText);

        try {
            oos.writeObject(outMessage);
            oos.flush();
            oos.reset();
            //clear up send message from txbox
            txtMessage.setText("");
        } catch (IOException ex) {
            Logger.getLogger(myClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void disconnectFromServer()
    {
        sendMessage("QUIT",ServerCommands.CMD_DISCONNECT);
    }



    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new myClientGUI().setVisible(true);
            }
        });


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button cmdConnect;
    private java.awt.Button cmdDisconnect;
    private java.awt.Button cmdSend;
    private java.awt.Button cmdTestCommands;
    private javax.swing.JPanel jPanel1;
    private java.awt.Label label1;
    private java.awt.Label lblServer;
    private java.awt.Label lblStatus;
    private java.awt.List list1;
    private java.awt.TextArea txtChatHistory;
    private java.awt.TextField txtMessage;
    private javax.swing.JTextField txtPort;
    private java.awt.TextField txtServer;
    // End of variables declaration//GEN-END:variables


//thread to handle text for the text box
class clientListener extends Thread{

    TextArea txtArea;
    List lstOnlineUserListBox;

public clientListener(java.awt.TextArea t,java.awt.List myListBox)
{
   this.txtArea=t;
   this.lstOnlineUserListBox=myListBox;
}

@Override
public void run()
{
    listenForMessages();
}

public synchronized void listenForMessages()
{
   //******************************************************
    //recieve message from server
    try{
        do{
            //System.out.println("ois.getClass() " + ois.getClass());

            inMessage = (myMessage) ois.readObject();  //this line needs to have a catch for classnotfoundexc
            System.out.println("CLIENT:> Recieved Message " + inMessage.displayMessage());
            txtArea.append(inMessage.displayMessage());
            ois.reset();
        }
        while(inMessage.getCOMMAND()!=ServerCommands.CMD_DISCONNECT);
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }

    //******************************************************
    //quit command recieved shut down client
    System.out.println("CLIENT:> Stopped Listerner Thread");
}
}//
   
}
